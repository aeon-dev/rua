The Rua-1 is a Little-Endian system.
Opcodes are 8-bits, and can contain 0-N byte operands to form an instruction.

Various portions of the architecture are inspired by the 6502, Z80 and the 8086 processors.
However, it's different to all of them, and is really an architecture on it's own.

===============================================================================
 System overview
===============================================================================

Address Bus                Data Bus
 (16-bit)                   (8-bit)
    | |                      | |
    | |     +------+<--PCL-->| |       +------+
    | |<----|  PC  |         | |<=====>|  A   |
    | |     +------+<--PCH-->| |       +------+
    | |                      | |          |
    | |     +------+<-MARL-->| |          v
    | |<--->| MAR  |         | |       +------+
    | |     +------+<-MARH-->| |<======| ALU  |--+
    | |        |             | |       +------+  |
               v             | |          ^      |
            +------+         | |          |      |
            |Memory|<------->| |       +------+  |
            +------+         | |<=====>|  B   |  |
                             | |       +------+  |
            +------+         | |                 |
            |Contrl|<------->| |       +------+  |
            +------+         | |<=====>|  SR  |<-+
                             | |       +------+
                             | |
              +------+       | |       +------+
              |  SP  |<=====>| |<=====>|  X   |
              +------+       | |       +------+
                             | |
                             | |       +------+
                             | |<=====>|  Y   |
                             | |       +------+
                             | |

===============================================================================
 Control signals
===============================================================================

  Signal  |  Description     
-----------------------------------------------
   AI     |  Register A In
   AO     |  Register A Out
   BI     |  Register B In
   BO     |  Register B Out
   XI     |  Register X In
   XO     |  Register X Out
   YI     |  Register Y In
   YO     |  Register Y Out
   SFI    |  Status Flags In
   SFO    |  Status Flags Out
   ALM0   |  ALU Mode bit 0
   ALM1   |  ALU Mode bit 1
   ALM2   |  ALU Mode bit 2
   ALM3   |  ALU Mode bit 3
   ALO    |  ALU Out
   PCLI   |  Program Counter Low In
   PCLO   |  Program Counter Low Out
   PCHI   |  Program Counter High In
   PCHO   |  Program Counter High Out
   MARLI  |  Memory Address Register Low In
   MARLO  |  Memory Address Register Low Out
   MARHI  |  Memory Address Register High In
   MARHO  |  Memory Address Register High Out
   MI     |  Memory In
   MO     |  Memory Out
   CI     |  Control In
   CO     |  Control Out
   SPI    |  Stack Pointer Register In
   SPO    |  Stack Pointer Register Out
   PCP    |  Program Counter ("Plus") Increment
   PCO    |  Program Counter Out
   MARI   |  Memory Address Register In
   MARO   |  Memory Address Register Out
   HLT    |  Halt the processor

===============================================================================
 Registers
===============================================================================

+=============================================+
|       8 bits         |        8 bits        |
+=============================================+
|                     PC                      |  Program counter (internal)
+----------------------+----------------------+
|         PCH          |         PCL          |  Program counter low and high bytes.
+=============================================+
|                     MAR                     |  Memory Access Register (internal)
+----------------------+----------------------+
|         MARH         |         MARL         |  Memory Access Register low and high bytes.
+=============================================+
                       |          A           |  Accumulator
                       +======================+
                       |          B           |  General purpose, Accumulator argument (ie. A - B)
                       +======================+
                       |          X           |  X register
                       +======================+
                       |          Y           |  Y register
                       +======================+
                       |          SP          |  Stack pointer
                       +======================+
                       |          SR          |  Status register
                       +======================+

===============================================================================
 Status register
===============================================================================

+===============================================+
|  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
|-----------------------------------------------|
|  IE |  -  |  -  |  -  | OF  | SF  | ZF  | CF  |
+===============================================+

  Flag   |       Name       |                      Description
---------|----------------------------------------------------------------------------
  CF     | Carry            | 1 when the MSB generated a carry after an ALU operation
  ZF     | Zero             | An ALU operation resulted in 0
  SF     | Sign             | Set to MSB of result after ALU operation
  OF     | Overflow         | Set when a signed ALU operation resulted in overflow
  IE     | Interrupt enable | Can be used to turn off interrupts

===============================================================================
 Instruction set addressing modes
===============================================================================

  Mode  |   Description
--------------------------------------------------------
  reg   | A register. Can be any of the 8-bit registers.
  imm8  | 8-bit immediate value
  adr   | 16-bit memory address

===============================================================================
 Move operations
===============================================================================

MOV reg, reg
MOV reg, imm8
MOV reg, adr
MOV adr, reg

===============================================================================
 Jump operations
===============================================================================

JMP adr

JMP can be replaced with any of the jump or conditional jump instructions below.

  Instruction  |   Description                 | signed-ness |  Condition Flags   
-----------------------------------------------------------------------------------
      JMP      | Jump to another address       |             |          x
      JO       | Jump if overflow              |             |       OF = 1
      JNO      | Jump if not overflow          |             |       OF = 0
      JS       | Jump if sign                  |             |       SF = 1
      JNS      | Jump if not sign              |             |       SF = 0
     JE/JZ     | Jump if equal (zero)          |             |       ZF = 1
    JNE/JNZ    | Jump if not equal (not zero)  |             |       ZF = 0
     JB/JC     | Jump if below (carry)         |  unsigned   |       CF = 1
    JNB/JNC    | Jump if not below (not carry) |  unsigned   |       CF = 0
      JBE      | Jump if below or equal        |  unsigned   |  CF = 1 or ZF = 1
      JA       | Jump if above                 |  unsigned   | CF = 0 and ZF = 0
      JL       | Jump if less                  |   signed    |      SF != OF
      JGE      | Jump if greater or equal      |   signed    |      SF == OF
      JLE      | Jump if less or equal         |   signed    | ZF = 1 or SF != OF
      JG       | Jump if greater               |   signed    | ZF = 0 and SF == OF

===============================================================================
 ALU operations
===============================================================================

An ALU operation is always done through registers A, using B as the parameter value where applicable.
The result can be written to a register, or an immediate memory address.

add reg
sub adr

  Instruction |   Description
---------------------------------------------
     ADD      | Add (A + B)
     SUB      | Subtract (A - B)
     ADC      | Add with carry (A + B + CF)
     LSH      | Left shift (A << B)
     RSH      | Right shift (A >> B)
     OR       | OR (A | B)
     AND      | AND (A & B)
     XOR      | XOR (A ^ B)
     
Additionally, some ALU operations don't have an output:

  Instruction |   Description
---------------------------------------------
     CMP      | Compare (A == B)
     INC      | A++
     DEC      | A--

===============================================================================
 Procedures & Stack
===============================================================================

CALL adr

Push the current PC (Program Counter) register value onto the stack and jump.
When RET is called, the PC value is popped from the stack back into PC.

RET
Return from a CALL.

PUSH imm8
PUSH reg
PUSH adr

POP reg
POP adr

===============================================================================
 Interrupts
===============================================================================

INT reg
INT imm8
Call interrupt vector.

IRET
Return from an interrupt call.

CLI
Clear interrupt flag. Disables all interrupts.

SEI
Set the interrupt flag, enabling interrupts.

===============================================================================
 Byte code
===============================================================================

 Register Argument
-------------------
  Value | Register
--------+----------
 00     | A
 01     | B
 02     | C

Opcode|   Name   | Arguments
------+----------+---------------
  00  |          |
  01  |          |
  02  |          |
  03  |          |
  04  |          |
  05  |          |
  06  |          |
  07  |          |
  08  |          |
  09  |          |
  0A  |          |
  0B  |          |
  0C  |          |
  0D  |          |
  0E  |          |
  0F  |          |
  10  |          |
  11  |          |
  12  |          |
  13  |          |
  14  |          |
  15  |          |
  16  |          |
  17  |          |
  18  |          |
  19  |          |
  1A  |          |
  1B  |          |
  1C  |          |
  1D  |          |
  1E  |          |
  1F  |          |
  20  |          |
  21  |          |
  22  |          |
  23  |          |
  24  |          |
  25  |          |
  26  |          |
  27  |          |
  28  |          |
  29  |          |
  2A  |          |
  2B  |          |
  2C  |          |
  2D  |          |
  2E  |          |
  2F  |          |
  30  |          |
  31  |          |
  32  |          |
  33  |          |
  34  |          |
  35  |          |
  36  |          |
  37  |          |
  38  |          |
  39  |          |
  3A  |          |
  3B  |          |
  3C  |          |
  3D  |          |
  3E  |          |
  3F  |          |
  40  |          |
  41  |          |
  42  |          |
  43  |          |
  44  |          |
  45  |          |
  46  |          |
  47  |          |
  48  |          |
  49  |          |
  4A  |          |
  4B  |          |
  4C  |          |
  4D  |          |
  4E  |          |
  4F  |          |
  50  |          |
  51  |          |
  52  |          |
  53  |          |
  54  |          |
  55  |          |
  56  |          |
  57  |          |
  58  |          |
  59  |          |
  5A  |          |
  5B  |          |
  5C  |          |
  5D  |          |
  5E  |          |
  5F  |          |
  60  |          |
  61  |          |
  62  |          |
  63  |          |
  64  |          |
  65  |          |
  66  |          |
  67  |          |
  68  |          |
  69  |          |
  6A  |          |
  6B  |          |
  6C  |          |
  6D  |          |
  6E  |          |
  6F  |          |
  70  |          |
  71  |          |
  72  |          |
  73  |          |
  74  |          |
  75  |          |
  76  |          |
  77  |          |
  78  |          |
  79  |          |
  7A  |          |
  7B  |          |
  7C  |          |
  7D  |          |
  7E  |          |
  7F  |          |
  80  |          |
  81  |          |
  82  |          |
  83  |          |
  84  |          |
  85  |          |
  86  |          |
  87  |          |
  88  |          |
  89  |          |
  8A  |          |
  8B  |          |
  8C  |          |
  8D  |          |
  8E  |          |
  8F  |          |
  90  |          |
  91  |          |
  92  |          |
  93  |          |
  94  |          |
  95  |          |
  96  |          |
  97  |          |
  98  |          |
  99  |          |
  9A  |          |
  9B  |          |
  9C  |          |
  9D  |          |
  9E  |          |
  9F  |          |
  A0  |          |
  A1  |          |
  A2  |          |
  A3  |          |
  A4  |          |
  A5  |          |
  A6  |          |
  A7  |          |
  A8  |          |
  A9  |          |
  AA  |          |
  AB  |          |
  AC  |          |
  AD  |          |
  AE  |          |
  AF  |          |
  B0  |          |
  B1  |          |
  B2  |          |
  B3  |          |
  B4  |          |
  B5  |          |
  B6  |          |
  B7  |          |
  B8  |          |
  B9  |          |
  BA  |          |
  BB  |          |
  BC  |          |
  BD  |          |
  BE  |          |
  BF  |          |
  C0  |          |
  C1  |          |
  C2  |          |
  C3  |          |
  C4  |          |
  C5  |          |
  C6  |          |
  C7  |          |
  C8  |          |
  C9  |          |
  CA  |          |
  CB  |          |
  CC  |          |
  CD  |          |
  CE  |          |
  CF  |          |
  D0  |   JMP    | Address
  D1  |   JO     | Address
  D2  |   JNO    | Address
  D3  |   JS     | Address
  D4  |   JNS    | Address
  D5  |  JE/JZ   | Address
  D6  | JNE/JNZ  | Address
  D7  |  JB/JC   | Address
  D8  | JNB/JNC  | Address
  D9  |   JBE    | Address
  DA  |   JA     | Address
  DB  |   JL     | Address
  DC  |   JGE    | Address
  DD  |   JLE    | Address
  DE  |   JG     | Address
  DF  |          |
  E0  |          |
  E1  |          |
  E2  |          |
  E3  |          |
  E4  |          |
  E5  |          |
  E6  |          |
  E7  |          |
  E8  |          |
  E9  |          |
  EA  |          |
  EB  |          |
  EC  |          |
  ED  |          |
  EE  |          |
  EF  |          |
  F0  |          |
  F1  |          |
  F2  |          |
  F3  |          |
  F4  |          |
  F5  |          |
  F6  |          |
  F7  |          |
  F8  |          |
  F9  |          |
  FA  |          |
  FB  |          |
  FC  |          |
  FD  |          |
  FE  |          |
  FF  | HLT      | -
